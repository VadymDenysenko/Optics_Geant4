/// \file test_00_SensitiveDetector.cc
/// \brief Definition of the test_00_SensitiveDetector class
//
//
#include "test_00_SensitiveDetector.hh"

#include "G4Step.hh"
#include "G4TouchableHistory.hh"

#include "G4ParticleTypes.hh"
#include "G4ParticleDefinition.hh"

test_00_SensitiveDetector::test_00_SensitiveDetector(G4String name)
: G4VSensitiveDetector(name)
{

}

G4bool test_00_SensitiveDetector::ProcessHits(G4Step*, G4TouchableHistory*)
{
    return false;
}

G4bool test_00_SensitiveDetector::ProcessHits_constStep(const G4Step*,
                                                        G4TouchableHistory*)
{
/*
    if(aStep == NULL)
      return false;

    G4Track* theTrack = aStep->GetTrack();
    if(theTrack->GetDefinition() != G4OpticalPhoton::OpticalPhotonDefinition())
      return false;

    counter++;

    G4StepPoint* thePostPoint = aStep->GetPostStepPoint();

    G4TouchableHistory* theTouchable =
                        (G4TouchableHistory*)thePostPoint->GetTouchable();

    G4ThreeVector photonExit = trackInformation->GetExitPosition();
    G4ThreeVector photonArrive = thePostPoint->GetPosition();
    G4double arrivalTime = theTrack->GetGlobalTime();

    photonArrive = theTouchable->
                   GetHistory()->
                   GetTopTransform().TransformPoint(photonArrive);
*/
    return true;
}

test_00_SensitiveDetector::~test_00_SensitiveDetector()
{
//    G4cout << "HERE YOUR NUMBER!: " << counter << G4endl;
}
